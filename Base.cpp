#include "Base.h"

vector<string> Base::splitLine(const string & Line)
{
	stringstream strStream;
	strStream << Line;
	string part;
	vector<string> vectResult;

	while (strStream >> part)
		vectResult.push_back(part);
	return vectResult;
}

Base::Base(istream & in, ostream & out) : in(in), out(out) {}

Base::~Base() { }

void Base::start()
{
	
	while (true)
	{
				cout << "М Е Н Ю\n";
		cout << "open ../data/1-3.txt\n";
		cout << "open filename				 Отваряне на файл с данни\n";
		cout << "print				 	Визуализиране на прочетените данни\n";
		cout << "hasWay <cr 1> <cr 2>		  Има ли път между две кръстовища\n";
		//cout << "short3 crName1 crName2    Трите най-кратки пътя между две кръстовища\n";
		//cout << "altern crName1 crName2    Трите алтернативни най-кратки пътя между две затворени кръстовища\n";
		cout << "iscycled <crName>				 Има ли цикъл от кръстовище, от което сме тръгнали\n";
		cout << "isTour				 Ако може да се направи обиколка на всички улици без да повтаряме улици, да се изведе пътят\n";
		cout << "reachAll <crName>				 Възможно ли е да стигнем от дадено кръстовище до всички останали.\n";
		cout << "deadEnds				 Всички задънени улици(еднопосочна улица която свършва в кръстовище от което не излизат улици)\n\n";
		

		string Line;		
		getline(in, Line);
		if (Line.empty()) continue;

		vector<string> lineSplit = splitLine(Line);
		if (lineSplit[0] == "exit")
		{
			out << "Exiting..." << endl;
			break;
		}
		else
		{
			processInput(lineSplit);
		}
		out << endl;
	//	if (lineSplit[0]!="open" && lineSplit[0] != "print") system("pause");
	    if (lineSplit[0] == "open") system("cls");
	}
	
}

/*
	За тази карта да се реализират:
1. Проверка, дали има път между две зададени кръстовища.
2. Намиране на трите най-кратки пътя между две зададени кръстовища.
3. При наличието на затворени кръстовища (които да бъдат подавани като списък) да се намери трите алтернативни най-кратки пътища между две зададени кръстовища.
4. Проверка, дали при дадено кръстовище за начална точка е възможно да обиколим част от града и върнем обратно там, откъдето сме тръгнали.
5. Проверка, дали можем да направим пълна туристическа обиколка на всички улици без да минаваме по една и съща улица два пъти. Ако такава обиколка е възможна, да се намери маршрута на тази обиколка.
6. Проверка, дали е възможно да стигнем от дадено кръстовище до всички останали.
7. Намиране на всички задънени улици (еднопосочна улица която свършва в кръстовище от което не излизат улици).
Улиците описваме като двойка от имената на кръстовището от което започва и кръстовището, 
където свършва.

*/